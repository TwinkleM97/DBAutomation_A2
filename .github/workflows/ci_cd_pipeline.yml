name: Database CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DB_HOST: ${{ secrets.DB_HOST || '127.0.0.1' }}
  DB_USER: ${{ secrets.DB_ADMIN_USER || 'root' }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD || 'Secret5555' }}
  DB_NAME: ${{ secrets.DB_NAME || 'companydb' }}

jobs:
  database-deployment:
    runs-on: ubuntu-latest

    services: 
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Secret5555
          MYSQL_DATABASE: companydb
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -pSecret5555"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          pip install mysql-connector-python

      - name: Wait for MySQL Service
        run: |
          for i in {30..0}; do
            if mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "SELECT 1;" > /dev/null 2>&1; then
              echo " MySQL is ready!"
              break
            fi
            echo " MySQL not ready yet... ($i)"
            sleep 2
          done
          if [ "$i" = 0 ]; then
            echo " MySQL failed to start"
            exit 1
          fi

      - name: Set up MySQL Environment
        run: |
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "CREATE DATABASE IF NOT EXISTS companydb;"

      - name: Execute SQL Scripts
        run: |
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 < schema_changes.sql || echo "::warning::schema_changes.sql failed"
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 < add_departments.sql || echo "::warning::add_departments.sql failed"

      - name: Run Python Automation Script
        run: |
          python automate_db.py || echo "::warning::Python script failed"

      - name: Verify Database Deployment
        run: |
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "USE companydb; SHOW TABLES;"
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "USE companydb; DESCRIBE projects;"
          mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "USE companydb; DESCRIBE departments;"

      - name: Generate Deployment Report
        run: |
          {
            echo "=== PROG8850 Deployment Report ==="
            echo "Date: $(date)"
            echo "Database Host: $DB_HOST"
            echo "Tables:"
            mysql -h 127.0.0.1 -P 3307 -u root -pSecret5555 -e "USE companydb; SHOW TABLES;"
          } > deployment_report.txt
          cat deployment_report.txt
